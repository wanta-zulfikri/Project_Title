// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	books "Project_Title/app/features/books"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: _a0, userID
func (_m *Service) CreateBook(_a0 books.Core, userID uint) error {
	ret := _m.Called(_a0, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(books.Core, uint) error); ok {
		r0 = rf(_a0, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBook provides a mock function with given fields: id
func (_m *Service) DeleteBook(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBook provides a mock function with given fields: bookid
func (_m *Service) GetBook(bookid uint) (books.Core, error) {
	ret := _m.Called(bookid)

	var r0 books.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (books.Core, error)); ok {
		return rf(bookid)
	}
	if rf, ok := ret.Get(0).(func(uint) books.Core); ok {
		r0 = rf(bookid)
	} else {
		r0 = ret.Get(0).(books.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(bookid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields:
func (_m *Service) GetBooks() ([]books.Core, error) {
	ret := _m.Called()

	var r0 []books.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]books.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []books.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]books.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooksByUserID provides a mock function with given fields: userid
func (_m *Service) GetBooksByUserID(userid uint) ([]books.Core, error) {
	ret := _m.Called(userid)

	var r0 []books.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]books.Core, error)); ok {
		return rf(userid)
	}
	if rf, ok := ret.Get(0).(func(uint) []books.Core); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]books.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: id, updatedBook
func (_m *Service) UpdateBook(id uint, updatedBook books.Core) error {
	ret := _m.Called(id, updatedBook)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, books.Core) error); ok {
		r0 = rf(id, updatedBook)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
