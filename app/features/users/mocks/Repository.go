// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	users "Project_Title/app/features/users"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteProfile provides a mock function with given fields: id
func (_m *Repository) DeleteProfile(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProfile provides a mock function with given fields: id
func (_m *Repository) GetProfile(id uint) (users.Core, error) {
	ret := _m.Called(id)

	var r0 users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (users.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) users.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *Repository) Login(email string, password string) (users.Core, error) {
	ret := _m.Called(email, password)

	var r0 users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (users.Core, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) users.Core); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newUser
func (_m *Repository) Register(newUser users.Core) (users.Core, error) {
	ret := _m.Called(newUser)

	var r0 users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(users.Core) (users.Core, error)); ok {
		return rf(newUser)
	}
	if rf, ok := ret.Get(0).(func(users.Core) users.Core); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	if rf, ok := ret.Get(1).(func(users.Core) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: id, updatedUser
func (_m *Repository) UpdateProfile(id uint, updatedUser users.Core) error {
	ret := _m.Called(id, updatedUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, users.Core) error); ok {
		r0 = rf(id, updatedUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
